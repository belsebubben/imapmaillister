#!/usr/bin/python3
'''
Listing mail messages from an imap account
'''

import imaplib
import optparse
import configparser
from collections import namedtuple
import sys
import os
import email
import email.header
import signal
import dateutil
import dateutil.parser

CONFIG_FILE = os.path.expanduser('~/.imapmaillister')

class Configuration(object):
    '''Parsing the configurations'''
    def parse_args(self):
        '''Parsing of cli args'''
        self.opts = optparse.OptionParser(description='Simple imapchecker',\
                prog='imapmaillister', version='0.1')
        self.opts.add_option("--server", "-s", help="imapserver")
        self.opts.add_option("--port", "-P", help="server port", default=993)
        self.opts.add_option("--user", "-u", help="username")
        self.opts.add_option("--debug", "-D", help="debug", dest='debug', action='store_true')
        self.opts.add_option("--password", "-p", help="password")
        self.opts.add_option("--directory", "-d", help="Imap directory to show", default="Inbox")
        self.opts.add_option("--config", "-c", help="Config file to use", default=CONFIG_FILE)
        self.options, self.arguments = self.opts.parse_args()
        return (self.options, self.arguments)

    def validateconfig(self):
        '''Config validation'''
        demanded = ('server', 'user', 'password')
        for dem in demanded:
            if not self.options.__dict__.get(dem):
                print('Config error: missing variable: {0}'.format(dem))
                self.opts.print_help()
                sys.exit(1)

    def __init__(self):
        self.options, self.parsed_args = self.parse_args()
        if os.path.isfile(self.options.config):
            self.configuration = configparser.ConfigParser()
            self.configuration.read(self.options.config)
            self.options.server = self.configuration.get('main', "server")
            self.options.port = self.configuration.get('main', "port")
            self.options.user = self.configuration.get('main', "user")
            self.options.password = self.configuration.get('main', "password")
            self.options.directory = self.configuration.get('main', "directory")
        self.validateconfig()

# Timeout signal handler
def timeout_handler(signum, frame):
    '''We do not want to wait forever'''
    print("Connection time out!")
    raise Exception("end of time {0} {1}".format(signum, frame))
# Register signal
signal.signal(signal.SIGALRM, timeout_handler)

Mailmessage = namedtuple('Mailmessage', 'date fromsender subject')

class ImapConnection(object):
    '''Defining / handling the connection to the imap server'''

    def print_mails(self):
        '''Latest mails in picked folder printed on stdout'''
        print('{0}\t{1}\t{2}'.format('Date'.ljust(17), 'From'.ljust(self.maxsfromlen),\
                'Subject'.ljust(self.maxsubjectlen)))
        for mail in self.mailmessages:
            print('{0}\t{1}\t{2}'.format(mail.date, mail.fromsender.ljust(self.maxsfromlen),\
                    mail.subject.replace('\r\n', ' ')).ljust(self.maxsubjectlen)[0:100])

    def __init__(self, options):
        self.o = options
        self.mailmessages = []
        # We set the timeout to 3 seconds to connect
        signal.alarm(8)
        try:
            self.connection = imaplib.IMAP4_SSL(self.o.server)
            self.connection.login(self.o.user, self.o.password)
            self.connection.select(self.o.directory, readonly=True)
        except Exception as exc:
            print('An error occured trying to connect to\
                    server: {self.o.server}\n{exc}'.format(**locals()))
        self.status, self.msgs = self.connection.search(None, '(UNSEEN UNDELETED)')
        self.msgs = self.msgs[0].decode('UTF-8', 'strict').split(' ')
        self.msgs.reverse()
        self.maxsubjectlen = 0
        for msg in self.msgs[:5]:
            mailmsg = email.message_from_bytes(self.connection.fetch(msg, '(BODY[HEADER])')[1][0][1])
            subject, encoding = email.header.decode_header(mailmsg.get('Subject'))[0]
            msgdate = email.header.decode_header(mailmsg.get('Date'))[0][0]
            msgdate = dateutil.parser.parse(msgdate).strftime('%Y-%m-%d %H:%M')
            fromsender = email.header.decode_header(mailmsg.get('From'))[0][0]
            if isinstance(fromsender, bytes):
                fromsender = fromsender.decode(encoding or 'UTF-8', 'ignore')
            fromsender = fromsender.split('<')[0].replace('"', '')
            if isinstance(subject, bytes):
                subject = subject.decode(encoding or 'UTF-8', 'ignore')

            #print(msgdate, fromsender, subject)
            self.mailmessages.append(Mailmessage(msgdate, fromsender, subject))
        self.maxsubjectlen = sorted([len(mail[2]) for mail in self.mailmessages])[-1]
        self.maxsfromlen = sorted([len(mail[1]) for mail in self.mailmessages])[-1]


def main():
    '''Main'''
    cfg = Configuration()
    if cfg.options.debug:
        print(cfg.options)
        print(cfg.parsed_args)
    connection = ImapConnection(cfg.options)
    connection.print_mails()

if __name__ in '__main__':
    main()
